{"ast":null,"code":"import _toConsumableArray from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\nimport { MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn } from 'mdb-react-ui-kit';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() //detect Ethereum provider\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                if (provider) {\n                  console.log('ETH wallet is connected');\n                  window.web3 = new Web3(provider); // await window.ethereum.enable();\n                } else {\n                  console.log('no ETH wallet detected');\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, abi, address, contract, totalSupply, i, _KryptoBird;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; // const accounts = await window.web3.eth.getAccounts()\n\n                _context3.next = 3;\n                return window.ethereum.request({\n                  method: 'eth_requestAccounts'\n                });\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                networkData = KryptoBird.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                abi = KryptoBird.abi;\n                address = networkData.address;\n                contract = new web3.eth.Contract(abi, address);\n                this.setState({\n                  contract: contract\n                });\n                _context3.next = 16;\n                return contract.methods.totalSupply().call();\n\n              case 16:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                });\n                i = 1;\n\n              case 19:\n                if (!(i <= totalSupply)) {\n                  _context3.next = 27;\n                  break;\n                }\n\n                _context3.next = 22;\n                return contract.methods.kryptoBirdz(i - 1).call();\n\n              case 22:\n                _KryptoBird = _context3.sent;\n                this.setState({\n                  kryptoBirdz: [].concat(_toConsumableArray(this.state.kryptoBirdz), [_KryptoBird])\n                });\n\n              case 24:\n                i++;\n                _context3.next = 19;\n                break;\n\n              case 27:\n                _context3.next = 30;\n                break;\n\n              case 29:\n                window.alert('Smart contract not deployed');\n\n              case 30:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() // mint = (kryptoBird) => {\n    //     this.state.contract.methods.mint(kryptoBird).send({from: this.state.account})\n    //     .once('receipt', (receipt)=> {\n    //         this.setState({\n    //             kryptoBirdz: [...this.state.kryptoBirdz, KryptoBird]\n    //         })\n    //     })\n    // }\n\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.mint = function (kryptoBird) {\n      // it was giving Unhandled Rejection (TypeError): address.toLowerCase is not a function\n      // so I needed to add this line\n      _this.loadBlockchainData().then(function () {\n        _this.state.contract.methods.mint(kryptoBird).send({\n          from: _this.state.account\n        }).once('receipt', function (receipt) {\n          _this.setState({\n            kryptoBirdz: [].concat(_toConsumableArray(_this.state.kryptoBirdz), [KryptoBird])\n          });\n        });\n      });\n    };\n\n    _this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      kryptoBirdz: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"container-filled\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, console.log(this.state.kryptoBirdz), React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-3 mr-0\",\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Krypto Bird NFTs\"), React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, this.state.account)))), React.createElement(\"div\", {\n        className: \"container-fluid mt-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        style: {\n          opacity: '0.8'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: {\n          color: 'black'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"KryptoBirdz - NFT Marketplace\"), React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n          var kryptoBird = _this2.kryptoBird.value;\n\n          _this2.mint(kryptoBird);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Add a file location\",\n        className: \"form-control mb-1\",\n        ref: function ref(input) {\n          return _this2.kryptoBird = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        style: {\n          margin: '6px'\n        },\n        type: \"submit\",\n        className: \"btn btn-primary btn-black\",\n        value: \"MINT\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }))))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row textCenter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, this.state.kryptoBirdz.map(function (kryptoBird, key) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, React.createElement(MDBCard, {\n          className: \"token img\",\n          style: {\n            maxWidth: '22rem'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }, React.createElement(MDBCardImage, {\n          src: kryptoBird,\n          position: \"top\",\n          height: \"250rem\",\n          style: {\n            marginRight: '4px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }), React.createElement(MDBCardBody, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, React.createElement(MDBCardTitle, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, \" KryptoBirdz \"), React.createElement(MDBCardText, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }, \" The KryptoBirdz are 28 uniquely generated KBirdz from the cyberpunk galaxy! \"), React.createElement(MDBBtn, {\n          href: kryptoBird,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }, \"Download\")))));\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App; // import React, { Component } from \"react\";\n// import Web3 from \"web3\";\n// import detectEthereumProvider from \"@metamask/detect-provider\";\n// import KryptoBird from '../abis/KryptoBird.json'\n// import {MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn} from 'mdb-react-ui-kit';\n// import './App.css';\n// class App extends Component {\n//     async componentDidMount() {\n//         await this.loadWeb3();\n//         await this.loadBlockchainData();\n//     }\n//     // first up is to detect ethereum provider\n//     async loadWeb3() {\n//         const provider = await detectEthereumProvider();\n//         // modern browsers\n//         // if there is a provider then lets\n//         // lets log that it's working and access the window from the doc\n//         // to set Web3 to the provider \n//         if(provider) {\n//             console.log('ethereum wallet is connected')\n//             window.web3 = new Web3(provider)\n//         } else {\n//             // no ethereum provider\n//             console.log('no ethereum wallet detected')\n//         }\n//     }\n//     async loadBlockchainData() {\n//         const web3 = window.web3\n//         const accounts = await web3.eth.getAccounts()\n//         this.setState({account:accounts[0]})\n//         // create a constant js variable networkId which \n//         //is set to blockchain network id \n//         const networkId = await web3.eth.net.getId()\n//         const networkData = KryptoBird.networks[networkId]\n//          if(networkData) {\n//              // EXERCISE TIME!!!! :)\n//              // 1. create a var abi set to the Kryptobird abi\n//              // 2. create a var address set to networkData address\n//              // 3. create a var contract which grabs a \n//              //new instance of web3 eth Contract  \n//              // 4. log in the console the var contract successfully - GOOD LUCK!!!!\n//              const abi = KryptoBird.abi;\n//              const address = networkData.address; \n//              const contract = new web3.eth.Contract(abi, address)\n//              this.setState({contract})\n//              // call the total supply of our Krypto Birdz \n//              // grab the total supply on the front end and log the results\n//              // go to web3 doc and read up on methods and call \n//              const totalSupply = await contract.methods.totalSupply().call()\n//             this.setState({totalSupply})\n//             // set up an array to keep track of tokens \n//             // load KryptoBirdz\n//             for(let i = 1; i <= totalSupply; i++) {\n//                 const KryptoBird = await contract.methods.kryptoBirdz(i - 1).call()\n//                 // how should we handle the state on the front end? \n//                 this.setState({\n//                     kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\n//                 })\n//             }\n//          } else {\n//              window.alert('Smart contract not deployed')\n//          }\n//     }\n//     // with minting we are sending information and we need to specify the account\n//     mint = (kryptoBird) => {\n//         this.state.contract.methods.mint(kryptoBird).send({from:this.state.account})\n//         .once('receipt', (receipt)=> {\n//             this.setState({\n//                 kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\n//             })\n//         })  \n//     }\n//     constructor(props) {\n//          super(props);\n//          this.state = {\n//              account: '',\n//              contract:null,\n//              totalSupply:0,\n//              kryptoBirdz:[]\n//          }\n//     }\n//             // BUILDING THE MINTING FORM\n//             // 1. Create a text input with a place holder \n//             //'add file location'\n//             // 2. Create another input button with the type submit\n//     render() {\n//         return (\n//             <div className='container-filled'>\n//                 {console.log(this.state.kryptoBirdz)}\n//                 <nav className='navbar navbar-dark fixed-top \n//                 bg-dark flex-md-nowrap p-0 shadow'>\n//                 <div className='navbar-brand col-sm-3 col-md-3 \n//                 mr-0' style={{color:'white'}}>\n//                       Krypto Birdz NFTs (Non Fungible Tokens)\n//                 </div>\n//                 <ul className='navbar-nav px-3'>\n//                 <li className='nav-item text-nowrap\n//                 d-none d-sm-none d-sm-block\n//                 '>\n//                 <small className='text-white'>\n//                     {this.state.account}\n//                 </small>\n//                 </li>\n//                 </ul>\n//                 </nav>\n//                 <div className='container-fluid mt-1'>\n//                     <div className='row'>\n//                         <main role='main' \n//                         className='col-lg-12 d-flex text-center'>\n//                             <div className='content mr-auto ml-auto'\n//                             style={{opacity:'0.8'}}>\n//                                 <h1 style={{color:'black'}}>\n//                                     KryptoBirdz - NFT Marketplace</h1>\n//                             <form onSubmit={(event)=>{\n//                                 event.preventDefault()\n//                                 const kryptoBird = this.kryptoBird.value\n//                                 this.mint(kryptoBird)\n//                             }}>\n//                                 <input\n//                                 type='text'\n//                                 placeholder='Add a file location'\n//                                 className='form-control mb-1'\n//                                 ref={(input)=>this.kryptoBird = input}\n//                                 />\n//                                 <input style={{margin:'6px'}}\n//                                 type='submit'\n//                                 className='btn btn-primary btn-black'\n//                                 value='MINT'\n//                                 />\n//                                 </form>\n//                             </div>\n//                         </main>\n//                     </div>\n//                         <hr></hr>\n//                         <div className='row textCenter'>\n//                             {this.state.kryptoBirdz.map((kryptoBird, key)=>{\n//                                 return(\n//                                     <div >\n//                                         <div>\n//                                             <MDBCard className='token img' style={{maxWidth:'22rem'}}>\n//                                             <MDBCardImage src={kryptoBird}  position='top' height='250rem' style={{marginRight:'4px'}} />\n//                                             <MDBCardBody>\n//                                             <MDBCardTitle> KryptoBirdz </MDBCardTitle> \n//                                             <MDBCardText> The KryptoBirdz are 20 uniquely generated KBirdz from the cyberpunk cloud galaxy Mystopia! There is only one of each bird and each bird can be owned by a single person on the Ethereum blockchain. </MDBCardText>\n//                                             <MDBBtn href={kryptoBird}>Download</MDBBtn>\n//                                             </MDBCardBody>\n//                                             </MDBCard>\n//                                              </div>\n//                                     </div>\n//                                 )\n//                             })} \n//                         </div>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n// export default App;","map":{"version":3,"sources":["/Users/matt_wong/Desktop/nft-marketplace-starter-kit/src/components/App.js"],"names":["React","Component","Web3","detectEthereumProvider","KryptoBird","MDBCard","MDBCardBody","MDBCardTitle","MDBCardText","MDBCardImage","MDBBtn","App","loadWeb3","loadBlockchainData","provider","console","log","window","web3","ethereum","request","method","accounts","setState","account","eth","net","getId","networkId","networkData","networks","abi","address","contract","Contract","methods","totalSupply","call","i","kryptoBirdz","state","alert","props","mint","kryptoBird","then","send","from","once","receipt","color","opacity","event","preventDefault","value","input","margin","map","key","maxWidth","marginRight"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json'\nimport {MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn } from 'mdb-react-ui-kit';\nimport './App.css';\n\nclass App extends Component {\n\n    async componentDidMount() {\n        await this.loadWeb3();\n        await this.loadBlockchainData();\n    }\n\n    //detect Ethereum provider\n    async loadWeb3() {\n        const provider = await detectEthereumProvider();\n\n        if (provider) {\n            console.log('ETH wallet is connected')\n            window.web3 = new Web3(provider)\n            // await window.ethereum.enable();\n        } else {\n            console.log('no ETH wallet detected')\n        }\n    }\n\n    async loadBlockchainData() {\n        const web3 = window.web3\n\n        // const accounts = await window.web3.eth.getAccounts()\n        const accounts = await window.ethereum.request( {method: 'eth_requestAccounts'} );\n        this.setState({ account: accounts[0] } )\n\n        const networkId = await web3.eth.net.getId()\n        const networkData = KryptoBird.networks[networkId]\n        if(networkData) {\n            const abi = KryptoBird.abi\n            const address = networkData.address\n            const contract = new web3.eth.Contract(abi, address)\n            this.setState({contract})\n\n            const totalSupply = await contract.methods.totalSupply().call()\n            this.setState({totalSupply})\n    \n            for( let i = 1; i <= totalSupply; i++ ) {\n                const KryptoBird = await contract.methods.kryptoBirdz(i - 1).call()\n\n                this.setState({\n                    kryptoBirdz: [...this.state.kryptoBirdz, KryptoBird]\n                })\n            }\n\n        } else {\n            window.alert('Smart contract not deployed')\n        }\n    }\n\n    // mint = (kryptoBird) => {\n    //     this.state.contract.methods.mint(kryptoBird).send({from: this.state.account})\n    //     .once('receipt', (receipt)=> {\n    //         this.setState({\n    //             kryptoBirdz: [...this.state.kryptoBirdz, KryptoBird]\n    //         })\n    //     })\n    // }\n\n    mint = (kryptoBird) => {\n        // it was giving Unhandled Rejection (TypeError): address.toLowerCase is not a function\n        // so I needed to add this line\n        this.loadBlockchainData().then(() => {\n            this.state.contract.methods.mint(kryptoBird).send({from: this.state.account})\n            .once('receipt', (receipt)=> {\n                this.setState({\n                    kryptoBirdz: [...this.state.kryptoBirdz, KryptoBird]\n                })\n            })\n        })\n    }\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            account: '',\n            contract: null,\n            totalSupply: 0,\n            kryptoBirdz: []\n        }\n    }\n\n    render() {\n        return(\n            <div className='container-filled'>\n                {console.log(this.state.kryptoBirdz)}\n                <nav className='navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow'>\n                <div className='navbar-brand col-sm-3 col-md-3 mr-0' style={{color:'white'}}>\n                    Krypto Bird NFTs\n                </div>\n                <ul className='navbar-nav px-3'>\n                    <li className='nav-item text-nowrap d-none d-sm-none d-sm-block'>\n                    <small className='text-white'>\n                        {this.state.account}\n                    </small>\n                    </li>\n                </ul>\n                </nav>\n\n                <div className='container-fluid mt-1'>\n                    <div className='row'>\n                        <main role='main'\n                        className='col-lg-12 d-flex text-center'>\n                            <div className='content mr-auto ml-auto'\n                            style={{opacity: '0.8'}}>\n                                <h1 style={{color: 'black'}}>KryptoBirdz - NFT Marketplace</h1>\n                                <form onSubmit={(event)=> {\n                                    event.preventDefault()\n                                    const kryptoBird = this.kryptoBird.value\n                                    this.mint(kryptoBird)\n                                }}>\n                                    <input \n                                    type='text'\n                                    placeholder='Add a file location'\n                                    className='form-control mb-1'\n                                    ref={ (input)=>this.kryptoBird = input}\n                                    />\n                                    <input style={{margin: '6px'}}\n                                    type='submit'\n                                    className='btn btn-primary btn-black'\n                                    value='MINT'\n                                    />\n                                \n\n                                </form>\n                            </div>\n                        </main>\n                    </div>\n                        <hr></hr>\n                        <div className='row textCenter'>\n                            {this.state.kryptoBirdz.map((kryptoBird, key)=>{\n                                return(\n                                    <div>\n                                        <div>\n                                            <MDBCard className='token img' style={{maxWidth: '22rem'}}>\n                                            <MDBCardImage src={kryptoBird} position='top' height='250rem' style={{marginRight:'4px'}}/>\n                                            <MDBCardBody>\n                                            <MDBCardTitle> KryptoBirdz </MDBCardTitle>\n                                            <MDBCardText> The KryptoBirdz are 28 uniquely generated KBirdz from the cyberpunk galaxy! </MDBCardText>\n                                            <MDBBtn href={kryptoBird}>Download</MDBBtn>\n                                            </MDBCardBody>\n                                            </MDBCard>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n\n// import React, { Component } from \"react\";\n// import Web3 from \"web3\";\n// import detectEthereumProvider from \"@metamask/detect-provider\";\n// import KryptoBird from '../abis/KryptoBird.json'\n// import {MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn} from 'mdb-react-ui-kit';\n// import './App.css';\n\n// class App extends Component {\n\n//     async componentDidMount() {\n//         await this.loadWeb3();\n//         await this.loadBlockchainData();\n//     }\n\n//     // first up is to detect ethereum provider\n//     async loadWeb3() {\n//         const provider = await detectEthereumProvider();\n\n//         // modern browsers\n//         // if there is a provider then lets\n//         // lets log that it's working and access the window from the doc\n//         // to set Web3 to the provider \n        \n//         if(provider) {\n//             console.log('ethereum wallet is connected')\n//             window.web3 = new Web3(provider)\n//         } else {\n//             // no ethereum provider\n//             console.log('no ethereum wallet detected')\n//         }\n//     }\n\n//     async loadBlockchainData() {\n//         const web3 = window.web3\n//         const accounts = await web3.eth.getAccounts()\n//         this.setState({account:accounts[0]})\n\n//         // create a constant js variable networkId which \n//         //is set to blockchain network id \n//         const networkId = await web3.eth.net.getId()\n//         const networkData = KryptoBird.networks[networkId]\n//          if(networkData) {\n//              // EXERCISE TIME!!!! :)\n//              // 1. create a var abi set to the Kryptobird abi\n//              // 2. create a var address set to networkData address\n//              // 3. create a var contract which grabs a \n//              //new instance of web3 eth Contract  \n//              // 4. log in the console the var contract successfully - GOOD LUCK!!!!\n\n//              const abi = KryptoBird.abi;\n//              const address = networkData.address; \n//              const contract = new web3.eth.Contract(abi, address)\n//              this.setState({contract})\n\n//              // call the total supply of our Krypto Birdz \n//              // grab the total supply on the front end and log the results\n//              // go to web3 doc and read up on methods and call \n//              const totalSupply = await contract.methods.totalSupply().call()\n//             this.setState({totalSupply})\n//             // set up an array to keep track of tokens \n//             // load KryptoBirdz\n//             for(let i = 1; i <= totalSupply; i++) {\n//                 const KryptoBird = await contract.methods.kryptoBirdz(i - 1).call()\n//                 // how should we handle the state on the front end? \n//                 this.setState({\n//                     kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\n//                 })\n//             }\n//          } else {\n//              window.alert('Smart contract not deployed')\n//          }\n//     }\n\n//     // with minting we are sending information and we need to specify the account\n\n//     mint = (kryptoBird) => {\n//         this.state.contract.methods.mint(kryptoBird).send({from:this.state.account})\n//         .once('receipt', (receipt)=> {\n//             this.setState({\n//                 kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\n//             })\n//         })  \n//     }\n\n//     constructor(props) {\n//          super(props);\n//          this.state = {\n//              account: '',\n//              contract:null,\n//              totalSupply:0,\n//              kryptoBirdz:[]\n//          }\n//     }\n\n//             // BUILDING THE MINTING FORM\n//             // 1. Create a text input with a place holder \n//             //'add file location'\n//             // 2. Create another input button with the type submit\n\n//     render() {\n//         return (\n//             <div className='container-filled'>\n//                 {console.log(this.state.kryptoBirdz)}\n//                 <nav className='navbar navbar-dark fixed-top \n//                 bg-dark flex-md-nowrap p-0 shadow'>\n//                 <div className='navbar-brand col-sm-3 col-md-3 \n//                 mr-0' style={{color:'white'}}>\n//                       Krypto Birdz NFTs (Non Fungible Tokens)\n//                 </div>\n//                 <ul className='navbar-nav px-3'>\n//                 <li className='nav-item text-nowrap\n//                 d-none d-sm-none d-sm-block\n//                 '>\n//                 <small className='text-white'>\n//                     {this.state.account}\n//                 </small>\n//                 </li>\n//                 </ul>\n//                 </nav>\n\n//                 <div className='container-fluid mt-1'>\n//                     <div className='row'>\n//                         <main role='main' \n//                         className='col-lg-12 d-flex text-center'>\n//                             <div className='content mr-auto ml-auto'\n//                             style={{opacity:'0.8'}}>\n//                                 <h1 style={{color:'black'}}>\n//                                     KryptoBirdz - NFT Marketplace</h1>\n//                             <form onSubmit={(event)=>{\n//                                 event.preventDefault()\n//                                 const kryptoBird = this.kryptoBird.value\n//                                 this.mint(kryptoBird)\n//                             }}>\n//                                 <input\n//                                 type='text'\n//                                 placeholder='Add a file location'\n//                                 className='form-control mb-1'\n//                                 ref={(input)=>this.kryptoBird = input}\n//                                 />\n//                                 <input style={{margin:'6px'}}\n//                                 type='submit'\n//                                 className='btn btn-primary btn-black'\n//                                 value='MINT'\n//                                 />\n//                                 </form>\n//                             </div>\n//                         </main>\n//                     </div>\n//                         <hr></hr>\n//                         <div className='row textCenter'>\n//                             {this.state.kryptoBirdz.map((kryptoBird, key)=>{\n//                                 return(\n//                                     <div >\n//                                         <div>\n//                                             <MDBCard className='token img' style={{maxWidth:'22rem'}}>\n//                                             <MDBCardImage src={kryptoBird}  position='top' height='250rem' style={{marginRight:'4px'}} />\n//                                             <MDBCardBody>\n//                                             <MDBCardTitle> KryptoBirdz </MDBCardTitle> \n//                                             <MDBCardText> The KryptoBirdz are 20 uniquely generated KBirdz from the cyberpunk cloud galaxy Mystopia! There is only one of each bird and each bird can be owned by a single person on the Ethereum blockchain. </MDBCardText>\n//                                             <MDBBtn href={kryptoBird}>Download</MDBBtn>\n//                                             </MDBCardBody>\n//                                             </MDBCard>\n//                                              </div>\n//                                     </div>\n//                                 )\n//                             })} \n//                         </div>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n\n// export default App;"]},"metadata":{},"sourceType":"module"}