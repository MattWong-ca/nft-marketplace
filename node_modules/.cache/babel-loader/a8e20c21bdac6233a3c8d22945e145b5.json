{"ast":null,"code":"import _regeneratorRuntime from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() //detect Ethereum provider\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                if (provider) {\n                  console.log('ETH wallet is connected');\n                  window.web3 = new Web3(provider); // await window.ethereum.enable();\n                } else {\n                  console.log('no ETH wallet detected');\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var accounts, networkId, networkData, abi, address, contract;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return window.ethereum.request({\n                  method: 'eth_requestAccounts'\n                });\n\n              case 2:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts\n                });\n                networkId = web3.eth.net.getId();\n                networkData = KryptoBird.networks[networkId];\n\n                if (networkData) {\n                  abi = KryptoBird.abi;\n                  address = networkData.address;\n                  contract = new we3.eth.Contract(abi, address);\n                  console.log(contract);\n                }\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: ''\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-3 mr-0\",\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"Krypto Bird NFTs\"), React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, this.state.account)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/matt_wong/Desktop/nft-marketplace-starter-kit/src/components/App.js"],"names":["React","Component","Web3","detectEthereumProvider","KryptoBird","App","loadWeb3","loadBlockchainData","provider","console","log","window","web3","ethereum","request","method","accounts","setState","account","networkId","eth","net","getId","networkData","networks","abi","address","contract","we3","Contract","props","state","color"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;IAEMC,G;;;;;;;;;;;;;;;;uBAGQ,KAAKC,QAAL,E;;;;uBACA,KAAKC,kBAAL,E;;;;;;;;;;;;;;;QAGV;;;;;;;;;;;;;;uBAE2BJ,sBAAsB,E;;;AAAvCK,gBAAAA,Q;;AAEN,oBAAIA,QAAJ,EAAc;AACVC,kBAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAC,kBAAAA,MAAM,CAACC,IAAP,GAAc,IAAIV,IAAJ,CAASM,QAAT,CAAd,CAFU,CAGV;AACH,iBAJD,MAIO;AACHC,kBAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAKsBC,MAAM,CAACE,QAAP,CAAgBC,OAAhB,CAAyB;AAACC,kBAAAA,MAAM,EAAE;AAAT,iBAAzB,C;;;AAAjBC,gBAAAA,Q;AACN,qBAAKC,QAAL,CAAc;AAAEC,kBAAAA,OAAO,EAAEF;AAAX,iBAAd;AACMG,gBAAAA,S,GAAYP,IAAI,CAACQ,GAAL,CAASC,GAAT,CAAaC,KAAb,E;AACZC,gBAAAA,W,GAAcnB,UAAU,CAACoB,QAAX,CAAoBL,SAApB,C;;AACpB,oBAAGI,WAAH,EAAgB;AACNE,kBAAAA,GADM,GACArB,UAAU,CAACqB,GADX;AAENC,kBAAAA,OAFM,GAEIH,WAAW,CAACG,OAFhB;AAGNC,kBAAAA,QAHM,GAGK,IAAIC,GAAG,CAACR,GAAJ,CAAQS,QAAZ,CAAqBJ,GAArB,EAA0BC,OAA1B,CAHL;AAIZjB,kBAAAA,OAAO,CAACC,GAAR,CAAYiB,QAAZ;AACH;;;;;;;;;;;;;;;;;;AAGL,eAAYG,KAAZ,EAAmB;AAAA;;AAAA;;AACf,6EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTb,MAAAA,OAAO,EAAE;AADA,KAAb;AAFe;AAKlB;;;;6BAEQ;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,gEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAK,QAAA,SAAS,EAAC,qCAAf;AAAqD,QAAA,KAAK,EAAE;AAACc,UAAAA,KAAK,EAAC;AAAP,SAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADA,EAIA;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,kDAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAO,QAAA,SAAS,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKD,KAAL,CAAWb,OADhB,CADA,CADJ,CAJA,CADJ,CADJ;AAgBH;;;;EA1DajB,S;;AA6DlB,eAAeI,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json'\n\nclass App extends Component {\n\n    async componentDidMount() {\n        await this.loadWeb3();\n        await this.loadBlockchainData();\n    }\n\n    //detect Ethereum provider\n    async loadWeb3() {\n        const provider = await detectEthereumProvider();\n\n        if (provider) {\n            console.log('ETH wallet is connected')\n            window.web3 = new Web3(provider)\n            // await window.ethereum.enable();\n        } else {\n            console.log('no ETH wallet detected')\n        }\n    }\n\n    async loadBlockchainData() {\n        // const accounts = await window.web3.eth.getAccounts()\n        const accounts = await window.ethereum.request( {method: 'eth_requestAccounts'} );\n        this.setState({ account: accounts} )\n        const networkId = web3.eth.net.getId()\n        const networkData = KryptoBird.networks[networkId]\n        if(networkData) {\n            const abi = KryptoBird.abi\n            const address = networkData.address\n            const contract = new we3.eth.Contract(abi, address)\n            console.log(contract)\n        }\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            account: ''\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                <nav className='navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow'>\n                <div className='navbar-brand col-sm-3 col-md-3 mr-0' style={{color:'white'}}>\n                    Krypto Bird NFTs\n                </div>\n                <ul className='navbar-nav px-3'>\n                    <li className='nav-item text-nowrap d-none d-sm-none d-sm-block'>\n                    <small className='text-white'>\n                        {this.state.account}\n                    </small>\n                    </li>\n                </ul>\n                </nav>\n            </div>\n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}