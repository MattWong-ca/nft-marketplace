{"ast":null,"code":"import _toConsumableArray from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/matt_wong/Desktop/nft-marketplace-starter-kit/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() //detect Ethereum provider\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                if (provider) {\n                  console.log('ETH wallet is connected');\n                  window.web3 = new Web3(provider); // await window.ethereum.enable();\n                } else {\n                  console.log('no ETH wallet detected');\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, abi, address, contract, totalSupply, i, _KryptoBird;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; // const accounts = await window.web3.eth.getAccounts()\n\n                _context3.next = 3;\n                return window.ethereum.request({\n                  method: 'eth_requestAccounts'\n                });\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                networkData = KryptoBird.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                abi = KryptoBird.abi;\n                address = networkData.address;\n                contract = new web3.eth.Contract(abi, address);\n                this.setState({\n                  contract: contract\n                });\n                _context3.next = 16;\n                return contract.methods.totalSupply().call();\n\n              case 16:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                });\n                i = 1;\n\n              case 19:\n                if (!(i <= totalSupply)) {\n                  _context3.next = 27;\n                  break;\n                }\n\n                _context3.next = 22;\n                return contract.methods.kryptoBirdz(i - 1).call();\n\n              case 22:\n                _KryptoBird = _context3.sent;\n                this.setState({\n                  kryptoBirdz: [].concat(_toConsumableArray(this.state.kryptoBirdz), [_KryptoBird])\n                });\n\n              case 24:\n                i++;\n                _context3.next = 19;\n                break;\n\n              case 27:\n                _context3.next = 30;\n                break;\n\n              case 29:\n                window.alert('Smart contract not deployed');\n\n              case 30:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.mint = function (kryptoBird) {\n      _this.state.contract.methods.mint(kryptoBird).send({\n        from: _this.state.account\n      }).once('receipt', function (receipt) {\n        _this.setState({\n          kryptoBirdz: [].concat(_toConsumableArray(_this.state.kryptoBirdz), [KryptoBird])\n        });\n      });\n    };\n\n    _this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      kryptoBirdz: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-3 mr-0\",\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Krypto Bird NFTs\"), React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, this.state.account)))), React.createElement(\"div\", {\n        className: \"container-fluid mt-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        style: {\n          opacity: '0.8'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"KryptoBirdz - NFT Marketplace\"))))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/matt_wong/Desktop/nft-marketplace-starter-kit/src/components/App.js"],"names":["React","Component","Web3","detectEthereumProvider","KryptoBird","App","loadWeb3","loadBlockchainData","provider","console","log","window","web3","ethereum","request","method","accounts","setState","account","eth","net","getId","networkId","networkData","networks","abi","address","contract","Contract","methods","totalSupply","call","i","kryptoBirdz","state","alert","props","mint","kryptoBird","send","from","once","receipt","color","opacity"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json'\n\nclass App extends Component {\n\n    async componentDidMount() {\n        await this.loadWeb3();\n        await this.loadBlockchainData();\n    }\n\n    //detect Ethereum provider\n    async loadWeb3() {\n        const provider = await detectEthereumProvider();\n\n        if (provider) {\n            console.log('ETH wallet is connected')\n            window.web3 = new Web3(provider)\n            // await window.ethereum.enable();\n        } else {\n            console.log('no ETH wallet detected')\n        }\n    }\n\n    async loadBlockchainData() {\n        const web3 = window.web3\n\n        // const accounts = await window.web3.eth.getAccounts()\n        const accounts = await window.ethereum.request( {method: 'eth_requestAccounts'} );\n        this.setState({ account: accounts} )\n        const networkId = await web3.eth.net.getId()\n        const networkData = KryptoBird.networks[networkId]\n        if(networkData) {\n            const abi = KryptoBird.abi\n            const address = networkData.address\n            const contract = new web3.eth.Contract(abi, address)\n            this.setState({contract})\n\n            const totalSupply = await contract.methods.totalSupply().call()\n            this.setState({totalSupply})\n    \n            for( let i = 1; i <= totalSupply; i++ ) {\n                const KryptoBird = await contract.methods.kryptoBirdz(i - 1).call()\n\n                this.setState({\n                    kryptoBirdz: [...this.state.kryptoBirdz, KryptoBird]\n                })\n            }\n\n        } else {\n            window.alert('Smart contract not deployed')\n        }\n    }\n\n    mint = (kryptoBird) => {\n        this.state.contract.methods.mint(kryptoBird).send({from: this.state.account})\n        .once('receipt', (receipt)=> {\n            this.setState({\n                kryptoBirdz: [...this.state.kryptoBirdz, KryptoBird]\n            })\n        })\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            account: '',\n            contract: null,\n            totalSupply: 0,\n            kryptoBirdz: []\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                <nav className='navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow'>\n                <div className='navbar-brand col-sm-3 col-md-3 mr-0' style={{color:'white'}}>\n                    Krypto Bird NFTs\n                </div>\n                <ul className='navbar-nav px-3'>\n                    <li className='nav-item text-nowrap d-none d-sm-none d-sm-block'>\n                    <small className='text-white'>\n                        {this.state.account}\n                    </small>\n                    </li>\n                </ul>\n                </nav>\n\n                <div className='container-fluid mt-1'>\n                    <div className='row'>\n                        <main role='main'\n                        className='col-lg-12 d-flex text-center'>\n                            <div className='content mr-auto ml-auto'\n                            style={{opacity: '0.8'}}>\n                                <h1 style={{color: 'white'}}>KryptoBirdz - NFT Marketplace</h1>\n                            </div>\n\n                        </main>\n                    </div>\n                </div>\n\n\n            </div>\n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}